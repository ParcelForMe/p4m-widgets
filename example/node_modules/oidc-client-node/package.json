{
  "name": "oidc-client-node",
  "version": "1.0.10",
  "description": "OpenID Connect (OIDC) node.js library",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/edwinf/oidc-client-node.git"
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/edwinf/oidc-client-node/issues"
  },
  "dependencies": {
    "bluebird": "^2.9.34",
    "cookies": "^0.5.0",
    "crypto-js": "^3.1.5",
    "jsrsasign": "^4.8.3",
    "request-promise": "^0.4.2",
    "url": "^0.10.3"
  },
  "readme": "# oidc-client\r\n\r\nOpenID Connect (OIDC) client server side library\r\n\r\n## Install\r\n`$ npm install oidc-client-node`\r\n\r\n## Configuration Options\r\n\r\n ```javascript\r\nvar oidcConfig = {\r\n  scope: 'profile roles',\r\n  client_id: 'implicit_client',\r\n  callbackURL: '/auth/oidc/callback', // callback url, can be absolute or relative\r\n  authority: 'https://localhost:50000/core'; //'--insert-your-openid-provider-domain-name-here--',\r\n  response_type: \"id_token token\", \r\n  response_mode: \"form_post\",\r\n  scopeSeparator: ' ',\r\n  verbose_logging: true,\r\n  httpSettings: { strictSSL = true } // optional http settings for Request\r\n};\r\n```\r\n\r\n## Local options\r\n\r\nYou can also set options on a per request basis and have those options merged in. For example:\r\n\r\n```javascript\r\nvar localOptions = {\r\n  callbackURL: '/auth/oidc/callback', \r\n  acr_values: \"tenant:12\"\r\n};\r\n    \r\nvar oidcClient = new OidcClient(req, res, oidcConfig);\r\n\r\noidcClient.mergeRequestOptions(req, localOptions);\r\n\r\n**Note: You are currently required to merge request options (even if they are empty), otherwise the client may not work appropriately.**\r\n```\r\n \r\n## Implicit Flow Configuration Example\r\n \r\n ```javascript\r\nvar oidcConfig = {\r\n  scope: 'profile roles',\r\n  client_id: 'implicit_client',\r\n  callbackURL: '/auth/oidc/callback',\r\n  authority: 'https://localhost:50000/core';\r\n  response_type: \"id_token token\", \r\n  response_mode: \"form_post\",\r\n  scopeSeparator: ' ',\r\n  verbose_logging: true\r\n};\r\n```\r\n\r\n## Code Flow Configuration Example\r\n \r\n ```javascript\r\nvar oidcConfig = {\r\n  scope: 'profile roles offline_access', // offline is not required for code flow, but is typically used in this flow to get refresh tokens\r\n  client_id: 'implicit_client',\r\n  callbackURL: '/auth/oidc/callback',\r\n  authority: 'https://localhost:50000/core';\r\n  response_type: \"code\", \r\n  response_mode: \"form_post\",\r\n  scopeSeparator: ' ',\r\n  verbose_logging: true\r\n};\r\n```\r\n\r\n## Wiring up your routes\r\n\r\nWire up your routes (this example uses req.body which was based on express / body parser) \r\n\r\n```javascript\r\napp.get('/auth/oidc/login',\r\n  function (req, res) {\r\n    \r\n    var oidcClient = new OidcClient(req, res, oidcConfig);\r\n        \r\n    var tokenRequest = oidcClient.createTokenRequestAsync();\r\n    \r\n    tokenRequest.then(function (results) {\r\n      console.log('about to redirect');\r\n      res.redirect(results.url);  \r\n    }).catch(function(error){\r\n        console.log('error generating redirect url: ' + error);\r\n    });\r\n});\r\n\r\napp.post(/auth/oidc/callback,\r\n  function (req, res) {\r\n    \r\n    var oidcClient = new OidcClient(req, res, oidcConfig);\r\n    \r\n    var tokenResponse = oidcClient.processResponseAsync(req.body);\r\n    \r\n    tokenResponse.then(function (results) {\r\n      console.log(results);\r\n    }).catch(function(error) {\r\n        console.log('error parsing token response: ' + error);\r\n    });\r\n    \r\n    console.log('Made it to the end of the response function');\r\n});\r\n```\r\n\r\n## Response Example\r\n\r\nHere's an example of all the possible data in a response. What values you get back will dependent on the flow as well as the identity provider you are integrating with.\r\n\r\n```javascript\r\n{\r\n  \"profile\": {\r\n    \"sub\": \"1\",\r\n    \"name\": \"User\"\r\n  },\r\n  \"id_token\": \"613bfdfc867a4a838784965582aecfbb\",\r\n  \"access_token\": \"b976452d0cb94ced8825f3297bed2628\",\r\n  \"refresh_token\": \"62fd0a32fbc0496ab21e48835343b852\",\r\n  \"expires_in\": 360\r\n}\r\n```\r\n\r\n## Refreshing a token\r\n\r\nRefreshing a token is very similar to the other scenarios, it still requires configuration of the oidc client. The main difference is that no call-back to a route occurs.\r\n\r\n### Refresh Token Configuration Example\r\n\r\n ```javascript\r\nvar oidcConfig = {\r\n  scope: 'profile roles',\r\n  client_id: 'clientcreds_client',\r\n  client_secret: 'your_secret',\r\n  callbackURL: '/auth/oidc/callback',\r\n  authority: 'https://localhost:50000/core';\r\n  scopeSeparator: ' ',\r\n  verbose_logging: true\r\n};\r\n```\r\n\r\n### Refresh Token Request Example\r\n\r\n```javascript\r\napp.get('/token/refresh/', function(req, res) {\r\n  var oidcClient = new OidcClient(req, res, oidcConfig);\r\n  oidcClient.mergeRequestOptions(req, {});\r\n  \r\n  var refreshToken = getRefreshToken(); // get the current refresh token you have persisted somewhere\r\n  \r\n  oidcClient.refreshAccessTokenAsync(refreshToken).then(function (tokenResponse) {\r\n    handleTokenResponse(tokenResponse); // do something with the token you received\r\n    res.redirect('/');\r\n  });\r\n});\r\n```\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/edwinf/oidc-client-node",
  "_id": "oidc-client-node@1.0.10",
  "dist": {
    "shasum": "2ce913a4f8b255ade3128942d949301ff7ba94dd"
  },
  "_from": "oidc-client-node@^1.0.10",
  "_resolved": "https://registry.npmjs.org/oidc-client-node/-/oidc-client-node-1.0.10.tgz"
}
